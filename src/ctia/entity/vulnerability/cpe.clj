(ns ctia.entity.vulnerability.cpe
  (:require [ctim.schemas.vulnerability :as vulnerability]
            [clojure.string :as str]))

(defprotocol ICpeMatch
  (match? [this CpeMatch]))

(defn str->pattern
  [s]
  (-> s
      (str/replace "*" ".*")
      (str/replace "?" ".?")
      re-pattern))

(defn component-match?
  [s1 s2]
  (let [p1 (str->pattern s1)
        p2 (str->pattern s2)]
    (cond
      (= s1 s2) true
      (or (= s1 "-") (= s2 "-")) true
      (or (re-matches p1 s2) (re-matches p2 s1)) true
      :else false)))

(defrecord CpeMatch [part vendor product version version_update
                   edition lang sw_edition target_sw
                   target_hw other]
  Object
  (toString [_]
    (format "cpe:2.3:%s:%s:%s:%s:%s:%s:%s:%s:%s:%s:%s"
            part vendor product version version_update
            edition lang sw_edition target_sw
            target_hw other))

  ICpeMatch
  (match? [_ CpeMatch]
    (and CpeMatch
         (component-match? part (:part CpeMatch))
         (component-match? vendor (:vendor CpeMatch))
         (component-match? product (:product CpeMatch))
         (component-match? version (:version CpeMatch))
         (component-match? version_update (:version_update CpeMatch))
         (component-match? edition (:edition CpeMatch))
         (component-match? lang (:lang CpeMatch))
         (component-match? sw_edition (:sw_edition CpeMatch))
         (component-match? target_sw (:target_sw CpeMatch))
         (component-match? target_hw (:target_hw CpeMatch))
         (component-match? other (:other CpeMatch)))))

(defmethod print-method CpeMatch [v ^java.io.Writer w]
  (.write w (str v)))

(defn ->cpe-match
  [s]
  (when (vulnerability/formatted-cpe-23-string? s)
    (apply ->CpeMatch
           (str/split (str/replace-first s "cpe:2.3:" "")
                      #":"))))

(defn apply-operator
  [{:keys [negate operands operator result]}]
  (case operator
    "OR" (when (if negate
                 (not (some identity operands))
                 (some identity operands))
           result)
    "AND" (when (if negate
                  (not (every? identity operands))
                  (every? identity operands))
            result)))

(defn query-cpe-matches
  [{:keys [cpe_match negate operator]} cpes]
  (apply-operator {:negate negate
                   :operands (for [uri (map (comp ->cpe-match :cpe23Uri)
                                            cpe_match)]
                               (some (fn match-uri? [x] (match? uri x))
                                     cpes))
                   :operator operator
                   :result cpe_match}))

(defn query-children
  [{:keys [children negate operator]} cpes]
  (apply-operator {:negate negate
                   :operands (map (fn query-child [child]
                                    (query-cpe-matches child cpes))
                                  children)
                   :operator operator
                   :result children}))

(defn query-node
  [{:keys [children cpe_match] :as node} cpes]
  (cond
    (seq cpe_match) (query-cpe-matches node cpes)
    (seq children) (query-children node cpes)))

(defn vulnerabilities->ids
  [cpes vulnerabilities]
  (letfn [(query-vulnerability
            [{{:keys [nodes]} :configurations
              id :id}]
            (when (seq (filter (fn [node]
                                 (query-node node cpes))
                               nodes))
              id))]
    (keep query-vulnerability vulnerabilities)))




(comment (cpe-match "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:*:*"))
