(ns ctia.entity.vulnerability.cpe-search)

(defn apply-operator
  [{:keys [negate operands operator result]}]
  (case operator
    "OR" (when (if negate
                 (not (some identity operands))
                 (some identity operands))
           result)
    "AND" (when (if negate
                  (not (every? identity operands))
                  (every? identity operands))
            result)))

(defn query-cpe-matches
  [{:keys [cpe_match negate operator]} cpes]
  (apply-operator {:negate negate
                   :operands (for [uri (map :cpe23Uri cpe_match)]
                               (some #{uri} cpes))
                   :operator operator
                   :result cpe_match}))

(defn query-children
  [{:keys [children negate operator]} cpes]
  (apply-operator {:negate negate
                   :operands (map (fn query-child [child]
                                    (query-cpe-matches child cpes))
                                  children)
                   :operator operator
                   :result children}))

(defn query-node
  [{:keys [children cpe_match] :as node} cpes]
  (cond
    (seq cpe_match) (query-cpe-matches node cpes)
    (seq children) (query-children node cpes)))

(defn query-cve
  [id nodes cpes]
  (when (seq (keep (fn [node]
                     (query-node node cpes))
                   nodes))
    id))

(defn find-vulnerabilities
  [cpes vulnerabilities]
  (reduce (fn cpe-match-rf
            [acc [id [{{:keys [nodes]} :configurations}]]]
            (if-let [matching-id (query-cve id nodes cpes)]
              (conj acc matching-id)
              acc))
          []
          (group-by :id vulnerabilities)))
