(ns ctia.entity.vulnerability-test
  (:require [clj-momo.test-helpers.core :as mth]
            [clojure.test :refer [deftest is join-fixtures use-fixtures]]
            [ctia.entity.vulnerability :as sut]
            [ctia.entity.vulnerability.cpe :as cpe]
            [ctia.test-helpers
             [access-control :refer [access-control-test]]
             [auth :refer [all-capabilities]]
             [core :as helpers]
             [crud :refer [entity-crud-test]]
             [aggregate :refer [test-metric-routes]]
             [es :as es-helpers]
             [fake-whoami-service :as whoami-helpers]
             [http :refer [app->APIHandlerServices]]
             [store :refer [test-for-each-store-with-app]]]
            [ctim.examples.vulnerabilities :refer [new-vulnerability-maximal new-vulnerability-minimal]]
            [ductile.index :as ductile.index]))

(use-fixtures :once
  (join-fixtures [mth/fixture-schema-validation
                  whoami-helpers/fixture-server]))

(deftest test-vulnerability-routes
  (test-for-each-store-with-app
   (fn [app]
     (helpers/set-capabilities! app
                                "foouser"
                                ["foogroup"]
                                "user"
                                all-capabilities)
     (whoami-helpers/set-whoami-response app
                                         "45c1f5e3f05d0"
                                         "foouser"
                                         "foogroup"
                                         "user")
     (entity-crud-test
      (into sut/vulnerability-entity
            {:app app
             :example new-vulnerability-maximal
             :headers {:Authorization "45c1f5e3f05d0"}})))))

(deftest test-vulnerability-routes-access-control
  (access-control-test "vulnerability"
                       new-vulnerability-minimal
                       true
                       true
                       test-for-each-store-with-app))

(deftest test-vulnerability-metric-routes
  (test-metric-routes (into sut/vulnerability-entity
                            {:entity-minimal new-vulnerability-minimal
                             :enumerable-fields sut/vulnerability-enumerable-fields
                             :date-fields sut/vulnerability-histogram-fields})))

(deftest test-build-configurations-query
  (is (= (sut/build-configurations-query (map cpe/->cpe-match ["cpe:2.3:o:juniper:advanced_threat_prevention:*:*:*:*:*:*:*:*"
                                                               "cpe:2.3:h:juniper:atp400:-:*:*:*:*:*:*:*"]))
         "configurations.nodes.cpe_match.cpe23Uri:cpe\\:2.3\\:o\\:juniper\\:advanced_threat_prevention* OR configurations.nodes.children.cpe_match.cpe23Uri:cpe\\:2.3\\:o\\:juniper\\:advanced_threat_prevention* OR configurations.nodes.cpe_match.cpe23Uri:cpe\\:2.3\\:h\\:juniper\\:atp400* OR configurations.nodes.children.cpe_match.cpe23Uri:cpe\\:2.3\\:h\\:juniper\\:atp400*")))

(deftest search-by-cpe-match-strings-test
  (es-helpers/for-each-es-version
   "List Vulnerabilities with configurations matching CPE 2.3 match strings"
   [5 7]
   #(ductile.index/delete! % "*ctia_vulnerability*")
   (helpers/with-properties ;; simple way to have a proper store initialization
     ["ctia.store.es.default.port" es-port
      "ctia.store.es.default.version" version
      "ctia.store.es.default.auth" es-helpers/basic-auth
      "ctia.auth.type" "allow-all"]
     (helpers/fixture-ctia-with-app
      (fn [app]
        (let [_ (es-helpers/load-file-bulk app conn "./test/data/indices/sample-vulnerability-150.json")
              {{:keys [get-store]} :StoreService} (app->APIHandlerServices app)
              identity-map {:login "johndoe"
                            :groups ["Administators"]}
              store (get-store :vulnerability)
              vulnerability-ids (sut/vulnerability-ids-affected-by-cpe-matches
                                 {:cpe-matches (map cpe/->cpe-match
                                                    ["cpe:2.3:h:juniper:ex8200\\/vc_\\(xre\\):-:*:*:*:*:*:*:*"
                                                     "cpe:2.3:o:juniper:junos:14.1x53:*:*:*:*:*:*:*"])
                                  :identity-map identity-map
                                  :query-params {}
                                  :store store})
              _ (is (not (realized? vulnerability-ids)))
              results (sut/search-by-ids {:identity-map identity-map
                                          :ids vulnerability-ids
                                          :limit 10
                                          :params {:sort {:id :asc}}
                                          :store store})]
          (is (= #{"CVE-2018-0007" "CVE-2018-0024" "CVE-2018-0031"}
                 (set (map :title (:data results)))))))))))
